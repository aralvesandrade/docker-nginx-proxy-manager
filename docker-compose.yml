networks:
  my-network:
    external: true
    driver: bridge

volumes:
  npm_data:
  npm_letsencrypt:
  grafana_data:
  grafana_log:
  grafana_plugins:
  grafana_provisioning:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  prometheus:
  uptime-kuma_data:
  duckdns_config:
  portainer_data:
  postgres_exporter_data:
  redis_insight:

services:
  npm:
    image: "jc21/nginx-proxy-manager"
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    environment:
      - DB_MYSQL_HOST=mysql
      - DB_MYSQL_PORT=3306
      - DB_MYSQL_USER=npm
      - DB_MYSQL_PASSWORD=npm
      - DB_MYSQL_NAME=npm
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - ENV GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,grafana-simple-json-datasource
      - GF_LOG_MODE=console
      - GF_FEATURE_TOGGLES_ENABLE=autoMigrateOldPanels
      - TZ=America/Sao_Paulo
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_log:/var/log/grafana
      - grafana_plugins:/var/lib/grafana/plugins
      - grafana_provisioning:/etc/grafana/provisioning
    # ports:
    #   - "3000:3000"
    networks:
      - my-network

  sonarqube:
    image: sonarqube:9-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_SEARCH_JAVAADDITIONALOPTS=-Dnode.store.allow_mmap=false,-Ddiscovery.type=single-node
      - TZ=America/Sao_Paulo
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    # ports:
    #   - "9000:9000"
    networks:
      - my-network
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - prometheus:/etc/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # ports:
    #   - "9090:9090"
    networks:
      - my-network

  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime-kuma_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - "3001:3001"
    networks:
      - my-network

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    privileged: true
    restart: unless-stopped
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - "9000:9000"
    networks:
      - my-network

  duckdns:
    image: lscr.io/linuxserver/duckdns
    container_name: duckdns
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
      - SUBDOMAINS=aralvesandrade
      - TOKEN=3c3fd688-d653-42c4-a462-40a9059766a6
    volumes:
      - duckdns_config:/config
    networks:
      - my-network

  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: mysql_exporter
    restart: unless-stopped
    command:
      - --config.my-cnf=/cfg/config.my-cnf
    volumes:
      - ./mysql-exporter/config.my-cnf:/cfg/config.my-cnf
    # ports:
    #   - 9104:9104
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy

  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://root:123_password@postgres:5432/?sslmode=disable
    volumes:
      - postgres_exporter_data:/var/lib/postgres_exporter
    networks:
      - my-network
    depends_on:
      postgres:
        condition: service_healthy

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - my-network
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    command: "-port 9188"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys/fs/cgroup:/cgroup:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/localtime:/etc/localtime:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - my-network
    depends_on:
      - prometheus

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=123_password
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_SERVER=mongo
    ports:
      - 8081:8081
    networks:
      - my-network
    depends_on:
      mongo:
        condition: service_healthy

  redis-insight:
    image: redis/redisinsight
    container_name: redis-insight
    restart: unless-stopped
    volumes:
      - redis_insight:/data
    ports:
      - 5540:5540
    networks:
      - my-network
    depends_on:
      redis:
        condition: service_healthy