# docker network create my-network

networks:
  default:
    driver: bridge
  my-network:
    external: true

volumes:
  npm_data:
  npm_letsencrypt:
  grafana_data:
  grafana_log:
  grafana_plugins:
  grafana_provisioning:
  postgres:
  postgres_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  prometheus:
  uptime-kuma_data:
  duckdns_config:
  portainer_data:

services:
  npm:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - my-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - ENV GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,grafana-simple-json-datasource
      - GF_LOG_MODE=console
      - TZ=America/Sao_Paulo
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_log:/var/log/grafana
      - grafana_plugins:/var/lib/grafana/plugins
      - grafana_provisioning:/etc/grafana/provisioning
    # ports:
    #   - "3000:3000"
    networks:
      - my-network

  postgres:
    image: postgres:16.0
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - TZ=America/Sao_Paulo
    volumes:
      - postgres:/var/lib/postgresql
      - postgres_data:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    networks:
      - my-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U sonar -d sonar -h localhost",
        ]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 0s

  sonarqube:
    image: sonarqube:9.9.4-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_SEARCH_JAVAADDITIONALOPTS=-Dnode.store.allow_mmap=false,-Ddiscovery.type=single-node
      - TZ=America/Sao_Paulo
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    # ports:
    #   - "9000:9000"
    networks:
      - my-network
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - prometheus:/etc/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # ports:
    #   - "9090:9090"
    networks:
      - my-network

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    volumes:
      - uptime-kuma_data:/app/data
    # ports:
    #   - "3001:3001"
    networks:
      - my-network

  portainer:
    image: portainer/portainer
    container_name: portainer
    privileged: true
    restart: unless-stopped
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - "9000:9000"
    networks:
      - my-network

  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
      - SUBDOMAINS=aralvesandrade
      - TOKEN=3c3fd688-d653-42c4-a462-40a9059766a6
    volumes:
      - duckdns_config:/config

